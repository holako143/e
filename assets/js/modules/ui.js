import * as state from './state.js';import { elements, $ } from './dom.js';export function showToast(message, type = 'success', duration = 3000) {    if (!state.appSettings.showNotifications || !elements.toastContainer) return;    const toast = document.createElement('div');    toast.className = `toast ${type}`;    const iconClass = {        error: 'fa-exclamation-circle',        info: 'fa-info-circle',        warning: 'fa-exclamation-triangle',    }[type] || 'fa-check-circle';    toast.innerHTML = `<div class="icon"><i class="fas ${iconClass}"></i></div><div class="message">${message}</div><button class="close-btn"><i class="fas fa-times"></i></button>`;    toast.querySelector('.close-btn').onclick = () => toast.remove();    elements.toastContainer.appendChild(toast);    setTimeout(() => {        if (toast.parentElement) {            toast.style.opacity = '0';            toast.style.transform = 'translateY(-20px)';            setTimeout(() => toast.remove(), 300);        }    }, duration);}export function updateCharCount() {    if (!elements.inputText || !elements.charCount || !elements.sizeEstimate) return;    const text = elements.inputText.value;    elements.charCount.textContent = text.length;    elements.sizeEstimate.textContent = `~${new TextEncoder().encode(text).length} بايت`;}export function updateStats(originalSize, compressedSize) {    if (elements.originalSize) elements.originalSize.textContent = `${originalSize} بايت`;    if (elements.compressedSize) {        elements.compressedSize.textContent = `${compressedSize} بايت`;        if (originalSize > 0 && compressedSize > 0 && originalSize > compressedSize) {            const ratio = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);            elements.compressedSize.textContent += ` (${ratio}% توفير)`;        }    }}export function showResultsSection(show = true) {    if (!elements.resultsSection) return;    elements.resultsSection.style.display = show ? 'block' : 'none';    if (show) {        elements.resultsSection.classList.remove('hidden');        setTimeout(() => elements.resultsSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' }), 100);    }}export async function copyToClipboard(text, feedbackElement) {    if (!text) return showToast('لا يوجد نص للنسخ', 'warning');    try {        await navigator.clipboard.writeText(text);        showToast('تم نسخ النص إلى الحافظة');        if (feedbackElement) {            const originalHTML = feedbackElement.innerHTML;            feedbackElement.innerHTML = '<i class="fas fa-check"></i> تم النسخ';            feedbackElement.disabled = true;            setTimeout(() => {                feedbackElement.innerHTML = originalHTML;                feedbackElement.disabled = false;            }, 2000);        }    } catch (err) {        console.error('Copy failed:', err);        showToast('فشل في نسخ النص', 'error');    }}export function renderEmojis() {    if (!elements.emojiSlider) return;    elements.emojiSlider.innerHTML = '';    state.emojiList.forEach(emoji => {        const emojiEl = document.createElement('div');        emojiEl.className = 'emoji-item';        emojiEl.textContent = emoji;        emojiEl.title = `استخدام ${emoji} كحاوية للتشفير`;        emojiEl.dataset.emoji = emoji;        if (emoji === state.currentActiveEmoji) emojiEl.classList.add('active');        elements.emojiSlider.appendChild(emojiEl);    });    renderCustomEmojiList();}export function updateActiveEmojiUI(emoji) {    document.querySelectorAll('.emoji-item').forEach(el => {        el.classList.toggle('active', el.textContent === emoji);    });}export function renderCustomEmojiList() {    if (!elements.customEmojiList) return;    elements.customEmojiList.innerHTML = '';    if (state.emojiList.length === 0) {        elements.customEmojiList.innerHTML = '<p style="text-align:center;color:#64748b;padding:2rem;">لا توجد إيموجيات</p>';        return;    }    state.emojiList.forEach(emoji => {        const emojiRow = document.createElement('div');        emojiRow.className = 'emoji-row';        emojiRow.draggable = true;        emojiRow.dataset.emoji = emoji;        emojiRow.innerHTML = `<div class="emoji-handle"><i class="fas fa-grip-vertical"></i>${emoji}</div><button class="delete-emoji-btn" title="حذف الإيموجي"><i class="fas fa-trash"></i></button>`;        elements.customEmojiList.appendChild(emojiRow);    });}export function renderHistory() {    if (!elements.historyList || !elements.emptyHistory || !elements.historyCount) return;    elements.historyList.innerHTML = '';    const items = state.historyItems;    if (items.length === 0) {        elements.emptyHistory.style.display = 'block';        elements.historyCount.textContent = '0 عنصر محفوظ';        return;    }    elements.emptyHistory.style.display = 'none';    elements.historyCount.textContent = `${items.length} عنصر محفوظ`;    items.forEach((item, index) => {        const historyItemEl = document.createElement('div');        historyItemEl.className = 'history-item';        historyItemEl.dataset.index = index;        const date = new Date(item.timestamp).toLocaleString('ar-EG');        historyItemEl.innerHTML = `<div class="history-item-meta"><div class="history-item-date">${date}</div><div class="history-item-op">تشفير</div></div><div class="history-item-text">${item.text}${item.text.length >= 100 ? '...' : ''}</div><div class="history-item-emoji">${item.result.substring(0, 1)}</div>`;        elements.historyList.appendChild(historyItemEl);    });}export function switchTab(tabName) {    document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));    const targetTab = $(`${tabName}Tab`);    if (targetTab) targetTab.classList.add('active');    document.querySelectorAll('.sidebar-tab').forEach(tab => tab.classList.toggle('active', tab.dataset.tab === tabName));    if (window.innerWidth <= 768) closeSidebar();}export function openSidebar() {    if (elements.sidebar) elements.sidebar.classList.add('open');    document.body.classList.add('sidebar-open');    if (elements.sidebarOverlay) {        elements.sidebarOverlay.classList.add('active');    }}export function closeSidebar() {    if (elements.sidebar) elements.sidebar.classList.remove('open');    if (elements.sidebarOverlay) elements.sidebarOverlay.classList.remove('active');    document.body.classList.remove('sidebar-open');}export function applyTheme() {    const { theme } = state.appSettings;    const isDark = (theme === 'dark') || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);    document.body.classList.toggle('dark', isDark);    if (elements.toggleThemeBtn) {        elements.toggleThemeBtn.innerHTML = isDark ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';    }}export function changeColorTheme(themeColor) {    document.body.className = document.body.className.split(' ').filter(c => !c.startsWith('theme-')).join(' ');    document.body.classList.add(`theme-${themeColor}`);    state.appSettings.themeColor = themeColor;    state.saveSettings();    showToast(`تم تغيير الثيم إلى: ${themeColor}`);}export function changeFontSize(fontSize) {    document.documentElement.style.fontSize = fontSize;    state.appSettings.fontSize = fontSize;    state.saveSettings();    showToast(`تم تغيير حجم الخط إلى: ${fontSize}`);}export function checkPasswordStrength() {    if (!elements.password || !elements.passwordStrength) return;    const password = elements.password.value;    let score = 0;    if (password.length >= 8) score++;    if (password.length >= 12) score++;    if (/[a-z]/.test(password)) score++;    if (/[A-Z]/.test(password)) score++;    if (/[0-9]/.test(password)) score++;    if (/[^A-Za-z0-9]/.test(password)) score++;    const feedback = ['<span style="color: #ef4444;">ضعيفة جداً</span>', '<span style="color: #f59e0b;">ضعيفة</span>', '<span style="color: #eab308;">متوسطة</span>', '<span style="color: #22c55e;">قوية</span>', '<span style="color: #16a34a;">قوية جداً</span>'];    elements.passwordStrength.innerHTML = `قوة كلمة السر: ${feedback[Math.floor(score/1.5)] || feedback[0]}`;}export function applySettingsToUI() {    applyTheme();    changeFontSize(state.appSettings.fontSize);    document.body.classList.add(`theme-${state.appSettings.themeColor}`);    elements.themeSelector.value = state.appSettings.themeColor;    elements.fontSizeSelector.value = state.appSettings.fontSize;    elements.autoThemeToggle.checked = state.appSettings.theme === 'auto';    elements.darkThemeToggle.checked = state.appSettings.theme === 'dark';    elements.encryptionStrength.value = state.appSettings.encryptionStrength;    elements.autoCopyEncodedEmoji.checked = state.appSettings.autoCopyEncodedEmoji;    elements.autoCopyDecodedText.checked = state.appSettings.autoCopyDecodedText;    elements.showNotifications.checked = state.appSettings.showNotifications;}export function showShareModal(options, content) {    const modal = document.createElement('div');    modal.className = 'share-modal';    modal.innerHTML = `<div class="share-modal-content"><div class="share-modal-header"><h3>مشاركة المحتوى</h3><button id="closeShareModal" class="close-btn">&times;</button></div><div class="share-options-grid">${options.map(opt => `<a href="${opt.url || '#'}" target="_blank" rel="noopener noreferrer" class="share-option" data-action="${opt.action || 'open'}"><i class="${opt.icon}" style="color: ${opt.color};"></i><span>${opt.name}</span></a>`).join('')}</div></div>`;    document.body.appendChild(modal);    modal.addEventListener('click', async (e) => {        const isClose = e.target.matches('.share-modal, .close-btn, .close-btn *');        const shareLink = e.target.closest('.share-option');        if (isClose) {            document.body.removeChild(modal);        } else if (shareLink?.dataset.action === 'copy') {            e.preventDefault();            await copyToClipboard(content);            document.body.removeChild(modal);        }    });}
