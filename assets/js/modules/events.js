import * as ui from './ui.js';import * as handlers from './handlers.js';import * as uiHandlers from './ui_handlers.js';import { appSettings, saveSettings } from './state.js';import { elements } from './dom.js';let dragStartEmoji = null;function addListener(element, event, handler) {    if (element) element.addEventListener(event, handler);}export function setupEventListeners() {        addListener(elements.encodeBtn, 'click', handlers.handleEncodeText);    addListener(elements.decodeBtn, 'click', handlers.handleDecodeText);        addListener(elements.deleteBtn, 'click', uiHandlers.handleClearInput);    addListener(elements.pasteBtn, 'click', uiHandlers.handlePaste);    addListener(elements.inputText, 'input', ui.updateCharCount);        addListener(elements.logo, 'click', () => ui.switchTab('cipher'));    addListener(elements.menuToggle, 'click', ui.openSidebar);    addListener(elements.closeSidebar, 'click', ui.closeSidebar);        document.querySelectorAll('.sidebar-tab').forEach(tab => {        tab.addEventListener('click', () => ui.switchTab(tab.dataset.tab));    });        addListener(elements.resetBtn, 'click', uiHandlers.handleResetApp);    addListener(elements.toggleThemeBtn, 'click', uiHandlers.handleThemeToggle);            addListener(elements.copyBtn, 'click', (e) => ui.copyToClipboard(elements.output.value, e.currentTarget));    addListener(elements.shareBtn, 'click', uiHandlers.handleShare);        addListener(elements.addCustomEmoji, 'click', () => uiHandlers.handleAddNewEmoji(elements.customChar?.value));    addListener(elements.addEmojiBtn, 'click', () => uiHandlers.handleAddNewEmoji(elements.newEmoji?.value));    addListener(elements.resetEmoji, 'click', uiHandlers.handleResetEmojis);        if (elements.emojiSlider) {        elements.emojiSlider.addEventListener('click', (e) => {            const target = e.target.closest('.emoji-item');            if (target) uiHandlers.handleSetActiveEmoji(target.dataset.emoji);        });    }    if(elements.customEmojiList) {        elements.customEmojiList.addEventListener('click', (e) => {            if (e.target.closest('.delete-emoji-btn')) {                uiHandlers.handleRemoveEmoji(e.target.closest('.emoji-row').dataset.emoji);            }        });        elements.customEmojiList.addEventListener('dragstart', e => {            const target = e.target.closest('.emoji-row');            if(target) dragStartEmoji = target.dataset.emoji;        });        elements.customEmojiList.addEventListener('drop', e => {            const target = e.target.closest('.emoji-row');            if(target && dragStartEmoji) uiHandlers.handleEmojiDrop(dragStartEmoji, target.dataset.emoji);        });        elements.customEmojiList.addEventListener('dragover', e => e.preventDefault());    }        addListener(elements.clearHistory, 'click', uiHandlers.handleClearHistory);    addListener(elements.historyList, 'click', e => {        const target = e.target.closest('.history-item');        if (target) uiHandlers.handleRestoreFromHistory(target.dataset.index);    });        addListener(elements.themeSelector, 'change', e => ui.changeColorTheme(e.target.value));    addListener(elements.fontSizeSelector, 'change', e => ui.changeFontSize(e.target.value));    addListener(elements.autoThemeToggle, 'change', e => {        appSettings.theme = e.target.checked ? 'auto' : 'light';        if (e.target.checked && elements.darkThemeToggle) elements.darkThemeToggle.checked = false;        ui.applyTheme();        saveSettings();    });    addListener(elements.darkThemeToggle, 'change', e => {        appSettings.theme = e.target.checked ? 'dark' : 'light';        if (e.target.checked && elements.autoThemeToggle) elements.autoThemeToggle.checked = false;        ui.applyTheme();        saveSettings();    });        addListener(elements.useEncrypt, 'change', e => elements.passwordSection.classList.toggle('hidden', !e.target.checked));    addListener(elements.password, 'input', ui.checkPasswordStrength);    addListener(elements.togglePassword, 'click', () => {        const isPassword = elements.password.type === 'password';        elements.password.type = isPassword ? 'text' : 'password';        elements.togglePassword.innerHTML = isPassword ? '<i class="far fa-eye-slash"></i>' : '<i class="far fa-eye"></i>';    });    addListener(elements.encryptionStrength, 'change', e => {        appSettings.encryptionStrength = e.target.value;        saveSettings();    });    addListener(elements.useCustomIterations, 'change', e => {        elements.customIterationsSection.classList.toggle('hidden', !e.target.checked);        elements.encryptionStrength.disabled = e.target.checked;    });        addListener(elements.autoCopyEncodedEmoji, 'change', e => uiHandlers.handleSettingToggle('autoCopyEncodedEmoji', e.target.checked));    addListener(elements.autoCopyDecodedText, 'change', e => uiHandlers.handleSettingToggle('autoCopyDecodedText', e.target.checked));    addListener(elements.showNotifications, 'change', e => uiHandlers.handleSettingToggle('showNotifications', e.target.checked));        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {        if (appSettings.theme === 'auto') ui.applyTheme();    });    document.addEventListener('keydown', e => {        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && document.activeElement === elements.inputText) {            e.preventDefault();            handlers.handleEncodeText();        }        if (e.key === 'Escape') ui.closeSidebar();    });}
