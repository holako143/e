import * as state from './state.js';import * as ui from './ui.js';import { elements } from './dom.js';export function handleAddNewEmoji(emoji) {    if (!emoji || emoji.trim() === '') {        return ui.showToast('يرجى إدخال إيموجي صحيح', 'error');    }    emoji = emoji.trim();    if (state.emojiList.includes(emoji)) {        return ui.showToast('هذا الإيموجي موجود بالفعل', 'error');    }    state.emojiList.unshift(emoji);    handleSetActiveEmoji(emoji);    state.saveEmojis();    ui.showToast('تم إضافة الإيموجي بنجاح');    if (elements.newEmoji) elements.newEmoji.value = '';    if (elements.customChar) elements.customChar.value = '';}export function handleRemoveEmoji(emoji) {    if (state.emojiList.length <= 1) {        return ui.showToast('يجب أن تبقى إيموجي واحدة على الأقل', 'error');    }    state.emojiList = state.emojiList.filter(e => e !== emoji);    if (state.currentActiveEmoji === emoji) {        handleSetActiveEmoji(state.emojiList[0]);    }    state.saveEmojis();    ui.renderEmojis();    ui.showToast('تم حذف الإيموجي بنجاح');}export function handleSetActiveEmoji(emoji) {    state.setActiveEmoji(emoji);    ui.updateActiveEmojiUI(emoji);}export function handleResetEmojis() {    if (confirm('هل أنت متأكد من رغبتك في إعادة تعيين قائمة الإيموجي؟')) {        state.emojiList = [...state.defaultEmojis];        handleSetActiveEmoji(state.defaultEmojis[0]);        state.saveEmojis();        ui.renderEmojis();        ui.showToast('تم إعادة تعيين قائمة الإيموجي');    }}export function handleEmojiDrop(draggedEmoji, targetEmoji) {    const fromIndex = state.emojiList.indexOf(draggedEmoji);    const toIndex = state.emojiList.indexOf(targetEmoji);    if (fromIndex !== -1 && toIndex !== -1) {        state.emojiList.splice(fromIndex, 1);        state.emojiList.splice(toIndex, 0, draggedEmoji);        state.saveEmojis();        ui.renderCustomEmojiList();    }}export function handleClearHistory() {    if (confirm('هل أنت متأكد من رغبتك في مسح السجل؟')) {        state.historyItems = [];        state.saveHistory();        ui.renderHistory();        ui.showToast('تم مسح السجل بنجاح');    }}export function handleRestoreFromHistory(index) {    const item = state.historyItems[index];    if (item) {        elements.inputText.value = item.result;        ui.updateCharCount();        ui.switchTab('cipher');        ui.showToast('تم تحميل العنصر من السجل');    }}export function handleThemeToggle() {    const currentTheme = state.appSettings.theme;    state.appSettings.theme = currentTheme === 'auto' ? 'dark' : (currentTheme === 'dark' ? 'light' : 'auto');    ui.applyTheme();    state.saveSettings();    ui.showToast(`تم تغيير الثيم إلى: ${state.appSettings.theme}`);}export function handleSettingToggle(key, checked) {    if (key in state.appSettings) {        state.appSettings[key] = checked;        state.saveSettings();    }}export function handleClearInput() {    if (elements.inputText) {        elements.inputText.value = '';        ui.updateCharCount();        ui.showToast('تم مسح حقل الإدخال', 'info');    }}export async function handlePaste() {    if (!elements.inputText) return;    try {        const text = await navigator.clipboard.readText();        elements.inputText.value += text;        ui.updateCharCount();        ui.showToast('تم لصق النص من الحافظة');    } catch (err) {        console.error('Paste failed:', err);        ui.showToast('فشل لصق النص', 'error');    }}export function handleResetApp() {    if (confirm('هل أنت متأكد من رغبتك في إعادة تعيين التطبيق؟ سيتم حذف جميع البيانات المحفوظة.')) {        state.resetAppSettings();    }}export async function handleShare() {    const output = elements.output;    if (!output || !output.value) return ui.showToast('لا يوجد محتوى للمشاركة', 'warning');        const content = output.value;    const title = 'Emoji Cipher Pro - نص مشفر';    if (navigator.share) {        await navigator.share({ title, text: content });        ui.showToast('تم فتح نافذة المشاركة', 'success');    } else {                const shareOptions = [            { name: 'WhatsApp', icon: 'fab fa-whatsapp', color: '#25D366', url: `https:            { name: 'Telegram', icon: 'fab fa-telegram', color: '#0088cc', url: `https:            { name: 'Twitter', icon: 'fab fa-twitter', color: '#1DA1F2', url: `https:            { name: 'Copy', icon: 'fas fa-link', color: '#6B7280', action: 'copy' }        ];        ui.showShareModal(shareOptions, content);    }}
