import { defaultEmojis } from './config.js';const defaultAppSettings = {    theme: 'auto',    themeColor: 'default',    fontSize: '16px',    fontFamily: 'system',    showNotifications: true,    autoSave: true,    saveHistory: true,    autoCopyEncodedEmoji: true,    autoCopyDecodedText: true,    encryptionStrength: 'high',    compressionLevel: 'auto'};export let appSettings = { ...defaultAppSettings };export let emojiList = [...defaultEmojis];export let historyItems = [];export let currentActiveEmoji = defaultEmojis[0];export function setActiveEmoji(emoji) {    currentActiveEmoji = emoji;}export function saveSettings() {    if (appSettings.autoSave) {        localStorage.setItem('emojiCipher_settings', JSON.stringify(appSettings));    }}export function loadSettings() {    const saved = localStorage.getItem('emojiCipher_settings');    if (saved) {        try {                        const parsedSettings = JSON.parse(saved);            appSettings = { ...defaultAppSettings, ...parsedSettings };        } catch (e) {            console.error('Error loading settings:', e);            appSettings = { ...defaultAppSettings };        }    }}export function saveEmojis() {    localStorage.setItem('emojiCipher_emojis', JSON.stringify(emojiList));}export function loadEmojis() {    const saved = localStorage.getItem('emojiCipher_emojis');    if (saved) {        try {            const parsedEmojis = JSON.parse(saved);            if (Array.isArray(parsedEmojis) && parsedEmojis.length > 0) {                emojiList = parsedEmojis;            } else {                emojiList = [...defaultEmojis];            }        } catch (e) {            console.error('Error loading emojis:', e);            emojiList = [...defaultEmojis];        }    }        currentActiveEmoji = emojiList[0];}export function saveHistory() {    if (appSettings.saveHistory) {        localStorage.setItem('emojiCipher_history', JSON.stringify(historyItems));    }}export function loadHistory() {    const saved = localStorage.getItem('emojiCipher_history');    if (saved) {        try {            const parsedHistory = JSON.parse(saved);            if (Array.isArray(parsedHistory)) {                historyItems = parsedHistory;            }        } catch (e) {            console.error('Error loading history:', e);            historyItems = [];        }    }}export function resetAppSettings() {    localStorage.removeItem('emojiCipher_settings');    localStorage.removeItem('emojiCipher_history');    localStorage.removeItem('emojiCipher_emojis');        location.reload();}
